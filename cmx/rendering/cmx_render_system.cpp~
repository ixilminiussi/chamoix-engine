#include "cmx_render_system.h"

// cmx
#include "cmx_buffer.h"
#include "cmx_camera.h"
#include "cmx_debug_util.h"
#include "cmx_descriptors.h"
#include "cmx_device.h"
#include "cmx_frame_info.h"
#include "cmx_game.h"
#include "cmx_light_environment.h"
#include "cmx_renderer.h"
#include "cmx_swap_chain.h"

// lib
#include <imgui.h>
#include <stdexcept>
#include <vulkan/vulkan_core.h>

// std
#include <cstdlib>
#include <vulkan/vulkan_enums.hpp>
#include <vulkan/vulkan_handles.hpp>
#include <vulkan/vulkan_structs.hpp>

namespace cmx
{

RenderSystem *RenderSystem::_instance{nullptr};

RenderSystem *RenderSystem::getInstance()
{
    if (_instance == nullptr)
    {
        _instance = new RenderSystem();

        _instance->initializeScreenTextures();
    }

    return _instance;
}

RenderSystem::RenderSystem()
{
    _commandBuffer = (VkCommandBuffer_T *)(0);

    _window = &Game::getWindow();
    _device = std::make_unique<Device>(*_window);
    _renderer = std::make_unique<Renderer>(*_window, *_device.get());

    _uboBuffers = std::vector<std::unique_ptr<Buffer>>{SwapChain::MAX_FRAMES_IN_FLIGHT};

    _globalDescriptorSets = std::vector<vk::DescriptorSet>{SwapChain::MAX_FRAMES_IN_FLIGHT};
    _samplerDescriptorPool = DescriptorPool::Builder(*_device.get())
                                 .setMaxSets(MAX_SAMPLER_SETS)
                                 .addPoolSize(vk::DescriptorType::eCombinedImageSampler, 100)
                                 .build();

    _globalSetLayout = DescriptorSetLayout::Builder(*_device.get())
                           .addBinding(0, vk::DescriptorType::eUniformBuffer, vk::ShaderStageFlagBits::eAllGraphics)
                           .build();

    _samplerDescriptorSetLayout =
        DescriptorSetLayout::Builder(*_device.get())
            .addBinding(0, vk::DescriptorType::eCombinedImageSampler, {vk::ShaderStageFlagBits::eFragment})
            .build();

    _samplerDescriptorSets.reserve(MAX_SAMPLER_SETS);

    initializeUbo();
}

RenderSystem::~RenderSystem()
{
}

void RenderSystem::initializeUbo()
{
    for (int i = 0; i < _uboBuffers.size(); i++)
    {
        _uboBuffers[i] =
            std::make_unique<Buffer>(*_device.get(), sizeof(GlobalUbo), 1, vk::BufferUsageFlagBits::eUniformBuffer,
                                     vk::MemoryPropertyFlagBits::eHostVisible);
        _uboBuffers[i]->map();
    }

    _globalPool = DescriptorPool::Builder(*_device.get())
                      .setMaxSets(SwapChain::MAX_FRAMES_IN_FLIGHT)
                      .addPoolSize(vk::DescriptorType::eUniformBuffer, SwapChain::MAX_FRAMES_IN_FLIGHT)
                      .build();

    _globalSetLayout = DescriptorSetLayout::Builder(*_device.get())
                           .addBinding(0, vk::DescriptorType::eUniformBuffer, vk::ShaderStageFlagBits::eAllGraphics)
                           .build();

    for (int i = 0; i < _globalDescriptorSets.size(); i++)
    {
        auto bufferInfo = _uboBuffers[i]->descriptorInfo();
        DescriptorWriter(*_globalSetLayout, *_globalPool).writeBuffer(0, &bufferInfo).build(_globalDescriptorSets[i]);
    }
}

void RenderSystem::closeWindow()
{
    spdlog::info("global release");

    _globalPool->free();
    _samplerDescriptorPool->free();
    _device->device().destroyDescriptorSetLayout(_samplerDescriptorSetLayout->getDescriptorSetLayout());

    _renderer->free();
    delete _renderer.release();

    for (auto &buffer : _uboBuffers)
    {
        buffer->free();
    }
    _uboBuffers.clear();

    delete _device.release();
    delete _window;
}

size_t RenderSystem::createSamplerDescriptor(vk::ImageView imageView, vk::Sampler sampler)
{
    vk::DescriptorSet descriptorSet;

    vk::DescriptorSetAllocateInfo setAllocInfo{};
    setAllocInfo.descriptorPool = _samplerDescriptorPool->getDescriptorPool();
    setAllocInfo.descriptorSetCount = 1;
    setAllocInfo.pSetLayouts = &(_samplerDescriptorSetLayout->getDescriptorSetLayout());

    if (_device->device().allocateDescriptorSets(&setAllocInfo, &descriptorSet) != vk::Result::eSuccess)
    {
        throw std::runtime_error("Failed to allocate texture descriptor set.");
    }

    vk::DescriptorImageInfo imageInfo{};
    imageInfo.imageLayout = vk::ImageLayout::eShaderReadOnlyOptimal;
    imageInfo.imageView = imageView;
    imageInfo.sampler = sampler;
    // Write info
    vk::WriteDescriptorSet descriptorWrite{};
    descriptorWrite.dstSet = descriptorSet;
    descriptorWrite.dstBinding = 0;
    descriptorWrite.dstArrayElement = 0;
    descriptorWrite.descriptorType = vk::DescriptorType::eCombinedImageSampler;
    descriptorWrite.descriptorCount = 1;
    descriptorWrite.pImageInfo = &imageInfo;

    _device->device().updateDescriptorSets(1, &descriptorWrite, 0, nullptr);

    _samplerDescriptorSets.push_back(descriptorSet);
    return _samplerDescriptorSets.size() - 1;
}

void RenderSystem::freeSamplerDescriptor(size_t descriptorSetID)
{
    vk::DescriptorSet &descriptorSet = getSamplerDescriptorSet(descriptorSetID);
    _device->device().freeDescriptorSets(_samplerDescriptorPool->getDescriptorPool(), 1, &descriptorSet);
}

vk::DescriptorSet &RenderSystem::getSamplerDescriptorSet(size_t index)
{
    if (index >= _samplerDescriptorSets.size())
    {
        throw std::out_of_range("RenderSystem: invalid sampler descriptor set index");
    }

    return _samplerDescriptorSets[index];
}

void RenderSystem::checkAspectRatio(Camera *camera)
{
    float aspect = _renderer->getAspectRatio();
    camera->updateAspectRatio(aspect);

    freeImages();

    initializeScreenTextures();
}

FrameInfo *RenderSystem::beginCommandBuffer()
{
    FrameInfo *frameInfo{nullptr};

    if ((_commandBuffer = _renderer->beginFrame()))
    {
        int frameIndex = _renderer->getFrameIndex();
        frameInfo = new FrameInfo{frameIndex, _commandBuffer, _globalDescriptorSets[frameIndex]};
    }

    return frameInfo;
}

void RenderSystem::beginRender(FrameInfo *frameInfo, const LightEnvironment *lightEnvironment) const
{
    static std::array<vk::ClearValue, 3> clearValues{};
    clearValues[0].color = {0.1f, 0.1f, 0.1f, 1.0f};
    clearValues[1].color = {0.1f, 0.1f, 0.1f, 1.0f};
    clearValues[2].depthStencil = vk::ClearDepthStencilValue{1.0f, 0};

    vk::RenderPassBeginInfo renderPassBeginInfo{};
    renderPassBeginInfo.renderPass = _renderPass;
    renderPassBeginInfo.framebuffer = _framebuffer;
    renderPassBeginInfo.renderArea.extent = _imageResolution;
    renderPassBeginInfo.clearValueCount = 3;
    renderPassBeginInfo.pClearValues = clearValues.data();

    frameInfo->commandBuffer.beginRenderPass(&renderPassBeginInfo, vk::SubpassContents::eInline);

    static vk::Viewport viewport;
    viewport.x = 0.0f;
    viewport.y = 0.0f;
    viewport.width = (float)_imageResolution.width;
    viewport.height = (float)_imageResolution.height;
    viewport.minDepth = 0.f;
    viewport.maxDepth = 1.f;

    vk::Rect2D scissor{vk::Offset2D{0, 0}, _imageResolution};
    frameInfo->commandBuffer.setViewport(0, 1, &viewport);
    frameInfo->commandBuffer.setScissor(0, 1, &scissor);
}

void RenderSystem::endRender(FrameInfo *frameInfo) const
{
    frameInfo->commandBuffer.endRenderPass();
    transitionImages(frameInfo);
}

void RenderSystem::beginPostProcess(FrameInfo *frameInfo) const
{
    _renderer->beginSwapChainRenderPass(frameInfo->commandBuffer);
}

void RenderSystem::endPostProcess(struct FrameInfo *frameInfo) const
{
    _renderer->endSwapChainRenderPass(frameInfo->commandBuffer);
    _renderer->endFrame();

    _device->device().waitIdle();
}

void RenderSystem::initializeScreenTextures()
{
    _imageResolution = _window->getExtent();

    SwapChainSupportDetails swapChainSupport = _device->getSwapChainSupport();
    vk::SurfaceFormatKHR surfaceFormat = SwapChain::chooseSwapSurfaceFormat(swapChainSupport.formats);

    _colorFormat = surfaceFormat.format;

    createImages();
    createImageViews();
    createRenderPass();
    createFrameBuffer();
    createSamplers();

    spdlog::info("RenderSystem: GBuffer RenderPass reloaded with x: {0}, y: {1} resolution", _imageResolution.width,
                 _imageResolution.height);
}

void RenderSystem::createImages()
{
    vk::ImageCreateInfo colorImageInfo{};

    colorImageInfo.sType = vk::StructureType::eImageCreateInfo;
    colorImageInfo.imageType = vk::ImageType::e2D;
    colorImageInfo.extent = vk::Extent3D{_imageResolution.width, _imageResolution.height, 1u};
    colorImageInfo.mipLevels = 1;
    colorImageInfo.arrayLayers = 1;
    colorImageInfo.samples = vk::SampleCountFlagBits::e1;
    colorImageInfo.format = _colorFormat;
    colorImageInfo.tiling = vk::ImageTiling::eOptimal;
    colorImageInfo.initialLayout = vk::ImageLayout::eUndefined;
    colorImageInfo.usage = vk::ImageUsageFlagBits::eColorAttachment | vk::ImageUsageFlagBits::eSampled;

    _device->createImageWithInfo(colorImageInfo, {vk::MemoryPropertyFlagBits::eDeviceLocal}, _colorImage,
                                 _colorImageMemory);

    vk::ImageCreateInfo normalImageInfo{};

    normalImageInfo.sType = vk::StructureType::eImageCreateInfo;
    normalImageInfo.imageType = vk::ImageType::e2D;
    normalImageInfo.extent = vk::Extent3D{_imageResolution.width, _imageResolution.height, 1u};
    normalImageInfo.mipLevels = 1;
    normalImageInfo.arrayLayers = 1;
    normalImageInfo.samples = vk::SampleCountFlagBits::e1;
    normalImageInfo.format = vk::Format::eR16G16B16A16Snorm;
    normalImageInfo.tiling = vk::ImageTiling::eOptimal;
    normalImageInfo.initialLayout = vk::ImageLayout::eUndefined;
    normalImageInfo.usage = vk::ImageUsageFlagBits::eColorAttachment | vk::ImageUsageFlagBits::eSampled;

    _device->createImageWithInfo(normalImageInfo, {vk::MemoryPropertyFlagBits::eDeviceLocal}, _normalImage,
                                 _normalImageMemory);

    vk::ImageCreateInfo depthImageInfo{};

    depthImageInfo.sType = vk::StructureType::eImageCreateInfo;
    depthImageInfo.imageType = vk::ImageType::e2D;
    depthImageInfo.extent = vk::Extent3D{_imageResolution.width, _imageResolution.height, 1u};
    depthImageInfo.mipLevels = 1;
    depthImageInfo.arrayLayers = 1;
    depthImageInfo.samples = vk::SampleCountFlagBits::e1;
    depthImageInfo.format = vk::Format::eD32Sfloat;
    depthImageInfo.tiling = vk::ImageTiling::eOptimal;
    depthImageInfo.initialLayout = vk::ImageLayout::eUndefined;
    depthImageInfo.usage = vk::ImageUsageFlagBits::eDepthStencilAttachment | vk::ImageUsageFlagBits::eSampled;

    _device->createImageWithInfo(depthImageInfo, {vk::MemoryPropertyFlagBits::eDeviceLocal}, _depthImage,
                                 _depthImageMemory);
}

void RenderSystem::createImageViews()
{
    vk::ImageViewCreateInfo colorViewInfo{};
    colorViewInfo.image = _colorImage; // The color texture image
    colorViewInfo.viewType = vk::ImageViewType::e2D;
    colorViewInfo.format = _colorFormat;
    colorViewInfo.subresourceRange.aspectMask = vk::ImageAspectFlagBits::eColor;
    colorViewInfo.subresourceRange.baseMipLevel = 0;
    colorViewInfo.subresourceRange.levelCount = 1;
    colorViewInfo.subresourceRange.baseArrayLayer = 0;
    colorViewInfo.subresourceRange.layerCount = 1;

    if (_device->device().createImageView(&colorViewInfo, nullptr, &_colorImageView) != vk::Result::eSuccess)
    {
        throw std::runtime_error("RenderSystem: failed to create color image colorView!");
    }

    vk::ImageViewCreateInfo normalViewInfo{};
    normalViewInfo.image = _normalImage; // The normal texture image
    normalViewInfo.viewType = vk::ImageViewType::e2D;
    normalViewInfo.format = vk::Format::eR16G16B16A16Snorm;
    normalViewInfo.subresourceRange.aspectMask = vk::ImageAspectFlagBits::eColor;
    normalViewInfo.subresourceRange.baseMipLevel = 0;
    normalViewInfo.subresourceRange.levelCount = 1;
    normalViewInfo.subresourceRange.baseArrayLayer = 0;
    normalViewInfo.subresourceRange.layerCount = 1;

    if (_device->device().createImageView(&normalViewInfo, nullptr, &_normalImageView) != vk::Result::eSuccess)
    {
        throw std::runtime_error("RenderSystem: failed to create depth image depthView!");
    }

    vk::ImageViewCreateInfo depthViewInfo{};
    depthViewInfo.image = _depthImage; // The depth texture image
    depthViewInfo.viewType = vk::ImageViewType::e2D;
    depthViewInfo.format = vk::Format::eD32Sfloat;
    depthViewInfo.subresourceRange.aspectMask = vk::ImageAspectFlagBits::eDepth;
    depthViewInfo.subresourceRange.baseMipLevel = 0;
    depthViewInfo.subresourceRange.levelCount = 1;
    depthViewInfo.subresourceRange.baseArrayLayer = 0;
    depthViewInfo.subresourceRange.layerCount = 1;

    if (_device->device().createImageView(&depthViewInfo, nullptr, &_depthImageView) != vk::Result::eSuccess)
    {
        throw std::runtime_error("RenderSystem: failed to create depth image depthView!");
    }
}

void RenderSystem::createRenderPass()
{
    vk::AttachmentDescription attachments[3]; // color, normal, depth

    // Color
    attachments[0].format = _colorFormat;
    attachments[0].loadOp = vk::AttachmentLoadOp::eClear;
    attachments[0].storeOp = vk::AttachmentStoreOp::eStore;
    attachments[0].initialLayout = vk::ImageLayout::eUndefined;
    attachments[0].finalLayout = vk::ImageLayout::eShaderReadOnlyOptimal;
    // Normal
    attachments[1].format = vk::Format::eR16G16B16A16Snorm;
    attachments[1].loadOp = vk::AttachmentLoadOp::eClear;
    attachments[1].storeOp = vk::AttachmentStoreOp::eStore;
    attachments[1].initialLayout = vk::ImageLayout::eUndefined;
    attachments[1].finalLayout = vk::ImageLayout::eShaderReadOnlyOptimal;
    // Depth
    attachments[2].format = vk::Format::eD32Sfloat;
    attachments[2].samples = vk::SampleCountFlagBits::e1;
    attachments[2].loadOp = vk::AttachmentLoadOp::eClear;
    attachments[2].storeOp = vk::AttachmentStoreOp::eStore;
    attachments[2].stencilLoadOp = vk::AttachmentLoadOp::eDontCare;
    attachments[2].stencilStoreOp = vk::AttachmentStoreOp::eDontCare;
    attachments[2].initialLayout = vk::ImageLayout::eUndefined;
    attachments[2].finalLayout = vk::ImageLayout::eDepthAttachmentStencilReadOnlyOptimal;

    vk::AttachmentReference depthAttachmentRef{};
    depthAttachmentRef.attachment = 2;
    depthAttachmentRef.layout = vk::ImageLayout::eDepthStencilAttachmentOptimal;

    vk::AttachmentReference colorAttachmentRefs[2] = {{0, vk::ImageLayout::eColorAttachmentOptimal},
                                                      {1, vk::ImageLayout::eColorAttachmentOptimal}};

    vk::SubpassDescription subpass{};
    subpass.pipelineBindPoint = vk::PipelineBindPoint::eGraphics;
    subpass.pDepthStencilAttachment = &depthAttachmentRef;
    subpass.colorAttachmentCount = 2;
    subpass.pColorAttachments = colorAttachmentRefs;

    // vk::SubpassDependency dependency = {};
    // dependency.dstSubpass = 0;
    // dependency.dstAccessMask =
    //     vk::AccessFlagBits::eColorAttachmentWrite | vk::AccessFlagBits::eDepthStencilAttachmentWrite;
    // dependency.dstStageMask =
    //     vk::PipelineStageFlagBits::eColorAttachmentOutput | vk::PipelineStageFlagBits::eEarlyFragmentTests;
    // dependency.srcSubpass = vk::SubpassExternal;
    // dependency.srcAccessMask = vk::AccessFlagBits::eNone;
    // dependency.srcStageMask =
    //     vk::PipelineStageFlagBits::eColorAttachmentOutput | vk::PipelineStageFlagBits::eEarlyFragmentTests;

    vk::RenderPassCreateInfo renderPassInfo{};
    renderPassInfo.attachmentCount = 3;
    renderPassInfo.pAttachments = attachments;
    renderPassInfo.subpassCount = 1;
    renderPassInfo.pSubpasses = &subpass;
    // renderPassInfo.dependencyCount = 1;
    // renderPassInfo.pDependencies = &dependency;

    if (_device->device().createRenderPass(&renderPassInfo, nullptr, &_renderPass) != vk::Result::eSuccess)
    {
        throw std::runtime_error("failed to create depth render pass");
    }

    DebugUtil::nameObject(_renderPass, vk::ObjectType::eRenderPass, "Gbuffer RenderPass");
}

void RenderSystem::createFrameBuffer()
{
    vk::ImageView attachments[3] = {_colorImageView, _normalImageView, _depthImageView};

    vk::FramebufferCreateInfo framebufferInfo{};
    framebufferInfo.renderPass = _renderPass;
    framebufferInfo.attachmentCount = 3;
    framebufferInfo.pAttachments = attachments;
    framebufferInfo.width = _imageResolution.width;
    framebufferInfo.height = _imageResolution.height;
    framebufferInfo.layers = 1;

    if (_device->device().createFramebuffer(&framebufferInfo, nullptr, &_framebuffer) != vk::Result::eSuccess)
    {
        throw std::runtime_error("failed to create frame buffer");
    }
}

void RenderSystem::createSamplers()
{
    vk::SamplerCreateInfo samplerCreateInfo{};
    samplerCreateInfo.magFilter = vk::Filter::eLinear;
    samplerCreateInfo.minFilter = vk::Filter::eLinear;
    samplerCreateInfo.addressModeU = vk::SamplerAddressMode::eClampToEdge;
    samplerCreateInfo.addressModeV = vk::SamplerAddressMode::eClampToEdge;
    samplerCreateInfo.addressModeW = vk::SamplerAddressMode::eClampToEdge;
    samplerCreateInfo.borderColor = vk::BorderColor::eIntOpaqueBlack;
    samplerCreateInfo.unnormalizedCoordinates = false;
    samplerCreateInfo.compareEnable = true;

    _depthSampler = _device->device().createSampler(samplerCreateInfo);

    _samplerDescriptorSetIDs[0] = RenderSystem::getInstance()->createSamplerDescriptor(_depthImageView, _depthSampler);
}

void RenderSystem::freeImages()
{
    _device->device().destroyFramebuffer(_framebuffer);
    _device->device().destroyRenderPass(_renderPass);
    _device->device().destroySampler(_depthSampler);
    _device->device().destroyImageView(_depthImageView);
    _device->device().destroyImage(_depthImage);
    _device->device().freeMemory(_depthImageMemory);
}

void RenderSystem::transitionImages(FrameInfo *frameInfo) const
{
    vk::ImageMemoryBarrier depthBarrier{};
    depthBarrier.image = _depthImage;
    depthBarrier.oldLayout = vk::ImageLayout::eDepthStencilAttachmentOptimal;
    depthBarrier.newLayout = vk::ImageLayout::eShaderReadOnlyOptimal;
    depthBarrier.srcAccessMask = vk::AccessFlagBits::eDepthStencilAttachmentWrite;
    depthBarrier.dstAccessMask = vk::AccessFlagBits::eShaderRead;
    depthBarrier.subresourceRange.aspectMask = vk::ImageAspectFlagBits::eDepth;
    depthBarrier.subresourceRange.baseMipLevel = 0;
    depthBarrier.subresourceRange.levelCount = 1;
    depthBarrier.subresourceRange.baseArrayLayer = 0;
    depthBarrier.subresourceRange.layerCount = 1;

    frameInfo->commandBuffer.pipelineBarrier(vk::PipelineStageFlagBits::eLateFragmentTests,
                                             vk::PipelineStageFlagBits::eFragmentShader, {}, 0, nullptr, 0, nullptr, 1,
                                             &depthBarrier);

    vk::ImageMemoryBarrier colorBarrier{};
    colorBarrier.image = _colorImage;
    colorBarrier.oldLayout = vk::ImageLayout::eColorAttachmentOptimal;
    colorBarrier.newLayout = vk::ImageLayout::eShaderReadOnlyOptimal;
    colorBarrier.srcAccessMask = vk::AccessFlagBits::eColorAttachmentWrite;
    colorBarrier.dstAccessMask = vk::AccessFlagBits::eShaderRead;
    colorBarrier.subresourceRange.aspectMask = vk::ImageAspectFlagBits::eColor;
    colorBarrier.subresourceRange.baseMipLevel = 0;
    colorBarrier.subresourceRange.levelCount = 1;
    colorBarrier.subresourceRange.baseArrayLayer = 0;
    colorBarrier.subresourceRange.layerCount = 1;

    frameInfo->commandBuffer.pipelineBarrier(vk::PipelineStageFlagBits::eColorAttachmentOutput,
                                             vk::PipelineStageFlagBits::eFragmentShader, {}, 0, nullptr, 0, nullptr, 1,
                                             &colorBarrier);

    vk::ImageMemoryBarrier normalBarrier{};
    normalBarrier.image = _normalImage;
    normalBarrier.oldLayout = vk::ImageLayout::eColorAttachmentOptimal;
    normalBarrier.newLayout = vk::ImageLayout::eShaderReadOnlyOptimal;
    normalBarrier.srcAccessMask = vk::AccessFlagBits::eColorAttachmentWrite;
    normalBarrier.dstAccessMask = vk::AccessFlagBits::eShaderRead;
    normalBarrier.subresourceRange.aspectMask = vk::ImageAspectFlagBits::eColor;
    normalBarrier.subresourceRange.baseMipLevel = 0;
    normalBarrier.subresourceRange.levelCount = 1;
    normalBarrier.subresourceRange.baseArrayLayer = 0;
    normalBarrier.subresourceRange.layerCount = 1;

    frameInfo->commandBuffer.pipelineBarrier(vk::PipelineStageFlagBits::eColorAttachmentOutput,
                                             vk::PipelineStageFlagBits::eFragmentShader, {}, 0, nullptr, 0, nullptr, 1,
                                             &normalBarrier);
}

void RenderSystem::writeUbo(FrameInfo *frameInfo, GlobalUbo *ubo)
{
    _uboBuffers[frameInfo->frameIndex]->writeToBuffer(ubo);
    _uboBuffers[frameInfo->frameIndex]->flush();
}

Device *RenderSystem::getDevice()
{
    return _device.get();
}

} // namespace cmx
